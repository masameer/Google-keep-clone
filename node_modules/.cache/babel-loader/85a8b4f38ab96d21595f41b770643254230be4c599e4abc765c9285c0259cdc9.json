{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\textutils\\\\src\\\\App.js\";\nimport React from 'react';\nimport Card from \"./Card\";\nimport Sdata from \"./Sdata\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  /* All Sdata object will come in \"val\" since using \"map func\" */\n  /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"heading_style\",\n      children: \" Most Watched Netflix Webseries \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 6\n    }, this), \"return (\", /*#__PURE__*/_jsxDEV(Card, {\n      imgsrc: Sdata[0].imgsrc,\n      title: Sdata[0].title,\n      sname: Sdata[0].sname,\n      link: Sdata[0].link\n    }, Sdata[0].id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 25\n    }, this), \")\"]\n  }, void 0, true);\n};\n_c = App;\nexport default App;\n\n/* in mapping you could write {Sdata.map(ncard)} or {Sdata.map(function ncard(val) {                               or        {Sdata.map((val) => {                                          since map(variable,index,arrray) syntax is,so \r\n                                                                                                                                                                                                       here we r using variable   \r\n                                                                                      return (                                                                    return (\r\n                                                                                              <App                                                                         <App \r\n                                                                                                imgsrc={val.imgsrc}                                                         imgsrc={val.imgsrc}\r\n                                                                                                title={val.title}                                                           title={val.title}\r\n                                                                                                sname= {val.sname}                                                          sname= {val.sname}\r\n                                                                                                link={val.link} />                                                          link={val.link} />  \r\n                                                                                         \r\n                                                                                              )                                                                           )\r\n                                                                                                                             }\r\n                                                                                                                             */\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Card","Sdata","jsxDEV","_jsxDEV","Fragment","_Fragment","App","children","className","fileName","_jsxFileName","lineNumber","columnNumber","imgsrc","title","sname","link","id","_c","$RefreshReg$"],"sources":["C:/react/textutils/src/App.js"],"sourcesContent":["import React from 'react'\r\nimport Card from \"./Card\" \r\nimport Sdata from \"./Sdata\"\r\n\r\n\r\n\r\nconst App=() => {/* All Sdata object will come in \"val\" since using \"map func\" */\r\n    <>\r\n     <h1 className=\"heading_style\"> Most Watched Netflix Webseries </h1>\r\n\r\n       \r\n         return (\r\n                        <Card \r\n                          key={Sdata[0].id}\r\n                          imgsrc={Sdata[0].imgsrc}\r\n                          title={Sdata[0].title}\r\n                          sname= {Sdata[0].sname}\r\n                          link={Sdata[0].link} \r\n                        /> \r\n                       )\r\n       \r\n</>\r\n}\r\n       \r\n   \r\n    \r\n\r\nexport default App\r\n\r\n\r\n /* in mapping you could write {Sdata.map(ncard)} or {Sdata.map(function ncard(val) {                               or        {Sdata.map((val) => {                                          since map(variable,index,arrray) syntax is,so \r\n                                                                                                                                                                                                        here we r using variable   \r\n                                                                                       return (                                                                    return (\r\n                                                                                               <App                                                                         <App \r\n                                                                                                 imgsrc={val.imgsrc}                                                         imgsrc={val.imgsrc}\r\n                                                                                                 title={val.title}                                                           title={val.title}\r\n                                                                                                 sname= {val.sname}                                                          sname= {val.sname}\r\n                                                                                                 link={val.link} />                                                          link={val.link} />  \r\n                                                                                          \r\n                                                                                               )                                                                           )\r\n                                                                                                                              }\r\n                                                                                                                              */\r\n\r\n\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,KAAK,MAAM,SAAS;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAI3B,MAAMC,GAAG,GAACA,CAAA,KAAM;EAAC;EACb,aAAAH,OAAA,CAAAE,SAAA;IAAAE,QAAA,gBACCJ,OAAA;MAAIK,SAAS,EAAC,eAAe;MAAAD,QAAA,EAAC;IAAgC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,YAIhD,eAAAT,OAAA,CAACH,IAAI;MAEHa,MAAM,EAAEZ,KAAK,CAAC,CAAC,CAAC,CAACY,MAAO;MACxBC,KAAK,EAAEb,KAAK,CAAC,CAAC,CAAC,CAACa,KAAM;MACtBC,KAAK,EAAGd,KAAK,CAAC,CAAC,CAAC,CAACc,KAAM;MACvBC,IAAI,EAAEf,KAAK,CAAC,CAAC,CAAC,CAACe;IAAK,GAJff,KAAK,CAAC,CAAC,CAAC,CAACgB,EAAE;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKjB,CAAC,KAG1B;EAAA,eAAE,CAAC;AACH,CAAC;AAAAM,EAAA,GAhBKZ,GAAG;AAqBT,eAAeA,GAAG;;AAGjB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}